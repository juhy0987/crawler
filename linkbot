source ~root/.bash_profile
PYTHON_HOME=/root/.pyenv/shims
 
serviceNameLo="LINKBOTLOG"
serviceName="linkbot"
serviceVersion="1.0.0_0"
serviceUser="root"
serviceGroup="root"
applDir="./"
serviceUserHome="/$serviceUser"
serviceLogFile="./$serviceName.output.log"
maxShutdownTime=30
pidFile="./$serviceName.pid"
pythonCommand="python"
pythonExe="$PYTHON_HOME/$pythonCommand"
pythonArgs="./$serviceName.py"
pythonCommandLine="$pythonExe $pythonArgs >> $serviceLogFile"
pythonCommandLineKeyword="$serviceName.py"

 
function makeFileWritable {
   local filename="$1"
   touch $filename || return 1
   chgrp $serviceGroup $filename || return 1
   chmod g+w $filename || return 1
   return 0; }
 
function checkProcessIsRunning {
   local pid="$1"
   if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
   if [ ! -e /proc/$pid ]; then return 1; fi
   return 0; }
 
function checkProcessIsOurService {
   local pid="$1"
   if [ "$(ps -p $pid --no-headers -o comm)" != "$pythonCommand" ]; then return 1; fi
   grep -q --binary -F "$pythonCommandLineKeyword" /proc/$pid/cmdline
   if [ $? -ne 0 ]; then return 1; fi
   return 0; }
 
function getServicePID {
   if [ ! -f $pidFile ]; then return 1; fi
   pid="$(<$pidFile)"
   checkProcessIsRunning $pid || return 1
   checkProcessIsOurService $pid || return 1
   return 0; }
 
function startServiceProcess {
   cd $applDir || return 1
   rm -f $pidFile
   makeFileWritable $pidFile || return 1
   makeFileWritable $serviceLogFile || return 1
   cmd="$pythonCommandLine"
   $cmd || return 1
   sleep 0.1
   pid="$(<$pidFile)"
   if checkProcessIsRunning $pid; then :; else
      echo -ne "\n$serviceName start failed, see logfile."
      return 1
   fi
   return 0; }
 
function stopServiceProcess {
   kill -2 $pid || return 1
   for ((i=0; i<maxShutdownTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo -e "\n$serviceName did not terminate within $maxShutdownTime seconds, sending SIGKILL..."
   kill -s KILL $pid || return 1
   local killWaitTime=30
   for ((i=0; i<killWaitTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $pidFile
         return 0
         fi
      sleep 0.1
      done
   echo "Error: $serviceName could not be stopped within $maxShutdownTime+$killWaitTime seconds!"
   return 1; }
 
function startService {
   getServicePID
   if [ $? -eq 0 ]; then echo -n "$serviceName is already running"; RETVAL=0; return 0; fi
   echo -n "Starting $serviceName   "
   startServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "started PID=$pid"
   RETVAL=0
   return 0; }
 
function stopService {
   getServicePID
   if [ $? -ne 0 ]; then echo -n "$serviceName is not running"; RETVAL=0; echo ""; return 0; fi
   echo -n "Stopping $serviceName   "
   stopServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo "failed"; return 1; fi
   echo "stopped PID=$pid"
   RETVAL=0
   return 0; }
 
function checkServiceStatus {
   echo -ne "Checking for $serviceName:   \n"
   if getServicePID; then
    cpids=`pgrep -P $pid`
    echo "running PPID=$pid"
    for cpid in $cpids
    do 
        echo "running CPID=$cpid"
    done
    RETVAL=0
   else
    echo "stopped"
    RETVAL=3
   fi
   return 0; }

function checkServiceVersion {
   echo -n "service version $serviceName: "
    echo "$serviceVersion"
    RETVAL=0
   return 0; }
 
function main {
   RETVAL=0
   case "$1" in
      start)                                               # starts the listener as a Linux service
         startService
         ;;
      stop)                                                # stops the listener program service
         stopService
         ;;
      restart)                                             # stops and restarts the service
         stopService && startService
         ;;
      status)                                              # displays the service status
         checkServiceStatus
         ;;
      version)                                              # displays the service version 
         checkServiceVersion
         ;;
		
      *)
         echo "Usage: $0 {start|stop|restart|status|version}"
         exit 1
         ;;
      esac
   exit $RETVAL
}
 
main $1
